{"ast":null,"code":"import $6nfFC$react, { useRef as $6nfFC$useRef, useContext as $6nfFC$useContext, useEffect as $6nfFC$useEffect, useState as $6nfFC$useState, useCallback as $6nfFC$useCallback } from \"react\";\nimport { useLayoutEffect as $6nfFC$useLayoutEffect, runAfterTransition as $6nfFC$runAfterTransition, focusWithoutScrolling as $6nfFC$focusWithoutScrolling, mergeProps as $6nfFC$mergeProps, useSyncRef as $6nfFC$useSyncRef } from \"@react-aria/utils\";\nimport { getInteractionModality as $6nfFC$getInteractionModality, isFocusVisible as $6nfFC$isFocusVisible, useFocusVisibleListener as $6nfFC$useFocusVisibleListener, useFocus as $6nfFC$useFocus, useFocusWithin as $6nfFC$useFocusWithin, useKeyboard as $6nfFC$useKeyboard } from \"@react-aria/interactions\";\nimport $6nfFC$clsx from \"clsx\";\n\nfunction $6a99195332edec8b$export$80f3e147d781571c(element) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if ($6nfFC$getInteractionModality() === 'virtual') {\n    let lastFocusedElement = document.activeElement;\n    $6nfFC$runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) $6nfFC$focusWithoutScrolling(element);\n    });\n  } else $6nfFC$focusWithoutScrolling(element);\n}\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n\nfunction $645f2e67b85a24c9$var$isStyleVisible(element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) return false;\n  let {\n    display: display,\n    visibility: visibility\n  } = element.style;\n  let isVisible = display !== 'none' && visibility !== 'hidden' && visibility !== 'collapse';\n\n  if (isVisible) {\n    const {\n      getComputedStyle: getComputedStyle\n    } = element.ownerDocument.defaultView;\n    let {\n      display: computedDisplay,\n      visibility: computedVisibility\n    } = getComputedStyle(element);\n    isVisible = computedDisplay !== 'none' && computedVisibility !== 'hidden' && computedVisibility !== 'collapse';\n  }\n\n  return isVisible;\n}\n\nfunction $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {\n  return !element.hasAttribute('hidden') && (element.nodeName === 'DETAILS' && childElement && childElement.nodeName !== 'SUMMARY' ? element.hasAttribute('open') : true);\n}\n\nfunction $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {\n  return element.nodeName !== '#comment' && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));\n}\n\nconst $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/$6nfFC$react.createContext(null);\nlet $9bf71ea28793e738$var$activeScope = null;\n\nfunction $9bf71ea28793e738$export$20e40289641fbbb6(props) {\n  let {\n    children: children,\n    contain: contain,\n    restoreFocus: restoreFocus,\n    autoFocus: autoFocus\n  } = props;\n  let startRef = $6nfFC$useRef();\n  let endRef = $6nfFC$useRef();\n  let scopeRef = $6nfFC$useRef([]);\n  let ctx = $6nfFC$useContext($9bf71ea28793e738$var$FocusContext);\n  var ref; // if there is no scopeRef on the context, then the parent is the focusScopeTree's root, represented by null\n\n  let parentScope = (ref = ctx === null || ctx === void 0 ? void 0 : ctx.scopeRef) !== null && ref !== void 0 ? ref : null;\n  $6nfFC$useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n  }, [children, parentScope]); // add to the focus scope tree in render order because useEffects/useLayoutEffects run children first whereas render runs parent first\n  // which matters when constructing a tree\n\n  if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope) && !$9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$export$d06fae2ee68b101e.addTreeNode(scopeRef, parentScope);\n  let node1 = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n  node1.contain = contain;\n  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);\n  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus); // this layout effect needs to run last so that focusScopeTree cleanup happens at the last moment possible\n\n  $6nfFC$useLayoutEffect(() => {\n    if (scopeRef && (parentScope || parentScope == null)) return () => {\n      // Restore the active scope on unmount if this scope or a descendant scope is active.\n      // Parent effect cleanups run before children, so we need to check if the\n      // parent scope actually still exists before restoring the active scope to it.\n      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;\n      $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);\n    };\n  }, [scopeRef, parentScope]);\n  let focusManager = $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef);\n  return /*#__PURE__*/$6nfFC$react.createElement($9bf71ea28793e738$var$FocusContext.Provider, {\n    value: {\n      scopeRef: scopeRef,\n      focusManager: focusManager\n    }\n  }, /*#__PURE__*/$6nfFC$react.createElement(\"span\", {\n    \"data-focus-scope-start\": true,\n    hidden: true,\n    ref: startRef\n  }), children, /*#__PURE__*/$6nfFC$react.createElement(\"span\", {\n    \"data-focus-scope-end\": true,\n    hidden: true,\n    ref: endRef\n  }));\n}\n\nfunction $9bf71ea28793e738$export$10c5169755ce7bd7() {\n  var ref;\n  return (ref = $6nfFC$useContext($9bf71ea28793e738$var$FocusContext)) === null || ref === void 0 ? void 0 : ref.focusManager;\n}\n\nfunction $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {\n  return {\n    focusNext() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode();\n\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode();\n      }\n\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusPrevious() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode();\n\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode();\n      }\n\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n\n    focusFirst() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusLast() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode();\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    }\n\n  };\n}\n\nconst $9bf71ea28793e738$var$focusableElements = ['input:not([disabled]):not([type=hidden])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'a[href]', 'area[href]', 'summary', 'iframe', 'object', 'embed', 'audio[controls]', 'video[controls]', '[contenteditable]'];\nconst $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nfunction $9bf71ea28793e738$var$getScopeRoot(scope) {\n  return scope[0].parentElement;\n}\n\nfunction $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) return false;\n    scope = scope.parent;\n  }\n\n  return true;\n}\n\nfunction $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {\n  let focusedNode = $6nfFC$useRef();\n  let raf = $6nfFC$useRef(null);\n  $6nfFC$useLayoutEffect(() => {\n    let scope1 = scopeRef.current;\n\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = null;\n      }\n\n      return;\n    } // Handle the Tab key to contain focus within the scope\n\n\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef)) return;\n      let focusedElement = document.activeElement;\n      let scope = scopeRef.current;\n      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n        tabbable: true\n      }, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      }\n\n      e.preventDefault();\n      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);\n    };\n\n    let onFocus = e => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if (!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) {\n        $9bf71ea28793e738$var$activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) focusedNode.current.focus();else if ($9bf71ea28793e738$var$activeScope) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = e.target;\n    };\n\n    let onBlur = e => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(document.activeElement, scopeRef)) {\n          $9bf71ea28793e738$var$activeScope = scopeRef;\n\n          if (document.body.contains(e.target)) {\n            focusedNode.current = e.target;\n            focusedNode.current.focus();\n          } else if ($9bf71ea28793e738$var$activeScope) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n        }\n      });\n    };\n\n    document.addEventListener('keydown', onKeyDown, false);\n    document.addEventListener('focusin', onFocus, false);\n    scope1.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope1.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n      document.removeEventListener('focusin', onFocus, false);\n      scope1.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope1.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]); // eslint-disable-next-line arrow-body-style\n\n  $6nfFC$useEffect(() => {\n    return () => {\n      if (raf.current) cancelAnimationFrame(raf.current);\n    };\n  }, [raf]);\n}\n\nfunction $9bf71ea28793e738$var$isElementInAnyScope(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element);\n}\n\nfunction $9bf71ea28793e738$var$isElementInScope(element, scope) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction $9bf71ea28793e738$var$isElementInChildScope(element) {\n  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {\n    scopeRef: s\n  } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {\n    if ($9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;\n  }\n\n  return false;\n}\n\nfunction $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {\n  var ref;\n  let parent = (ref = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || ref === void 0 ? void 0 : ref.parent;\n\n  while (parent) {\n    if (parent.scopeRef === ancestor) return true;\n    parent = parent.parent;\n  }\n\n  return false;\n}\n\nfunction $9bf71ea28793e738$var$focusElement(element) {\n  let scroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (element != null && !scroll) try {\n    $6a99195332edec8b$export$80f3e147d781571c(element);\n  } catch (err) {// ignore\n  } else if (element != null) try {\n    element.focus();\n  } catch (err1) {// ignore\n  }\n}\n\nfunction $9bf71ea28793e738$var$focusFirstInScope(scope) {\n  let tabbable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let sentinel = scope[0].previousElementSibling;\n  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n    tabbable: tabbable\n  }, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode(); // If the scope does not contain a tabbable element, use the first focusable element.\n\n  if (tabbable && !nextNode) {\n    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {\n      tabbable: false\n    }, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n\n  $9bf71ea28793e738$var$focusElement(nextNode);\n}\n\nfunction $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {\n  const autoFocusRef = $6nfFC$react.useRef(autoFocus);\n  $6nfFC$useEffect(() => {\n    if (autoFocusRef.current) {\n      $9bf71ea28793e738$var$activeScope = scopeRef;\n      if (!$9bf71ea28793e738$var$isElementInScope(document.activeElement, $9bf71ea28793e738$var$activeScope.current)) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);\n    }\n\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\n\nfunction $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  const nodeToRestoreRef = $6nfFC$useRef(typeof document !== 'undefined' ? document.activeElement : null); // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n\n  $6nfFC$useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!restoreFocus || contain) return;\n\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if (!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) $9bf71ea28793e738$var$activeScope = scopeRef;\n    };\n\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, contain]); // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n\n  $6nfFC$useLayoutEffect(() => {\n    $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current;\n    if (!restoreFocus) return; // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) return;\n      let focusedElement = document.activeElement;\n      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return;\n      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore; // Create a DOM tree walker that matches all tabbable elements\n\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(document.body, {\n        tabbable: true\n      }); // Find the next tabbable element after the currently focused element\n\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n        $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = null;\n      } // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n\n\n      if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore; // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n\n        do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);else // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n          // then move focus to the body.\n          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);\n      }\n    };\n\n    if (!contain) document.addEventListener('keydown', onKeyDown, true);\n    return () => {\n      if (!contain) document.removeEventListener('keydown', onKeyDown, true);\n      let nodeToRestore = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore; // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n\n      if (restoreFocus && nodeToRestore && ($9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current) || document.activeElement === document.body && $9bf71ea28793e738$var$activeScope === scopeRef)) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (document.activeElement === document.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n\n            while (treeNode) {\n              if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {\n                $9bf71ea28793e738$var$focusElement(treeNode.nodeToRestore);\n                return;\n              }\n\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\n\nfunction $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {\n  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n    acceptNode(node) {\n      var ref; // Skip nodes inside the starting node.\n\n      if (opts === null || opts === void 0 ? void 0 : (ref = opts.from) === null || ref === void 0 ? void 0 : ref.contains(node)) return NodeFilter.FILTER_REJECT;\n      if (node.matches(selector) && $645f2e67b85a24c9$export$e989c0fffaa6b27a(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;\n      return NodeFilter.FILTER_SKIP;\n    }\n\n  });\n  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;\n  return walker;\n}\n\nfunction $9bf71ea28793e738$export$c5251b9e124bf29(ref) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    focusNext() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let root = ref.current;\n      if (!root) return;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || document.activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;\n      let nextNode = walker.nextNode();\n\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode();\n      }\n\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusPrevious() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || document.activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;else {\n        let next = $9bf71ea28793e738$var$last(walker);\n        if (next) $9bf71ea28793e738$var$focusElement(next, true);\n        return next;\n      }\n      let previousNode = walker.previousNode();\n\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = $9bf71ea28793e738$var$last(walker);\n      }\n\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n\n    focusFirst() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n\n    focusLast() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let next = $9bf71ea28793e738$var$last(walker);\n      if (next) $9bf71ea28793e738$var$focusElement(next, true);\n      return next;\n    }\n\n  };\n}\n\nfunction $9bf71ea28793e738$var$last(walker) {\n  let next;\n  let last;\n\n  do {\n    last = walker.lastChild();\n    if (last) next = last;\n  } while (last);\n\n  return next;\n}\n\nclass $9bf71ea28793e738$var$Tree {\n  get size() {\n    return this.fastMap.size;\n  }\n\n  getTreeNode(data) {\n    return this.fastMap.get(data);\n  }\n\n  addTreeNode(scopeRef, parent, nodeToRestore) {\n    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);\n    let node = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: scopeRef\n    });\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) node.nodeToRestore = nodeToRestore;\n  }\n\n  removeTreeNode(scopeRef) {\n    // never remove the root\n    if (scopeRef === null) return;\n    let node = this.fastMap.get(scopeRef);\n    let parentNode = node.parent; // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n\n    for (let current of this.traverse()) if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;\n\n    let children = node.children;\n    parentNode.removeChild(node);\n    if (children.length > 0) children.forEach(child => parentNode.addChild(child));\n    this.fastMap.delete(node.scopeRef);\n  } // Pre Order Depth First\n\n\n  *traverse() {\n    let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root;\n    if (node.scopeRef != null) yield node;\n    if (node.children.length > 0) for (let child of node.children) yield* this.traverse(child);\n  }\n\n  clone() {\n    let newTree = new $9bf71ea28793e738$var$Tree();\n\n    for (let node of this.traverse()) newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);\n\n    return newTree;\n  }\n\n  constructor() {\n    this.fastMap = new Map();\n    this.root = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: null\n    });\n    this.fastMap.set(null, this.root);\n  }\n\n}\n\nclass $9bf71ea28793e738$var$TreeNode {\n  addChild(node) {\n    this.children.push(node);\n    node.parent = this;\n  }\n\n  removeChild(node) {\n    this.children.splice(this.children.indexOf(node), 1);\n    node.parent = undefined;\n  }\n\n  constructor(props) {\n    this.children = [];\n    this.contain = false;\n    this.scopeRef = props.scopeRef;\n  }\n\n}\n\nlet $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();\n\nfunction $f7dceffc5ad7768b$export$4e328f61c538687f() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    autoFocus = false,\n    isTextInput: isTextInput,\n    within: within\n  } = props;\n  let state = $6nfFC$useRef({\n    isFocused: false,\n    isFocusVisible: autoFocus || $6nfFC$isFocusVisible()\n  });\n  let [isFocused1, setFocused] = $6nfFC$useState(false);\n  let [isFocusVisibleState, setFocusVisible] = $6nfFC$useState(() => state.current.isFocused && state.current.isFocusVisible);\n  let updateState = $6nfFC$useCallback(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n  let onFocusChange = $6nfFC$useCallback(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n  $6nfFC$useFocusVisibleListener(isFocusVisible => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {\n    isTextInput: isTextInput\n  });\n  let {\n    focusProps: focusProps\n  } = $6nfFC$useFocus({\n    isDisabled: within,\n    onFocusChange: onFocusChange\n  });\n  let {\n    focusWithinProps: focusWithinProps\n  } = $6nfFC$useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n  return {\n    isFocused: isFocused1,\n    isFocusVisible: state.current.isFocused && isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n\nfunction $907718708eab68af$export$1a38b4ad7f578e1d(props) {\n  let {\n    children: children,\n    focusClass: focusClass,\n    focusRingClass: focusRingClass\n  } = props;\n  let {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = $f7dceffc5ad7768b$export$4e328f61c538687f(props);\n  let child = $6nfFC$react.Children.only(children);\n  return /*#__PURE__*/$6nfFC$react.cloneElement(child, $6nfFC$mergeProps(child.props, { ...focusProps,\n    className: $6nfFC$clsx({\n      [focusClass || '']: isFocused,\n      [focusRingClass || '']: isFocusVisible\n    })\n  }));\n}\n\nlet $e6afbd83fe6ebbd2$var$FocusableContext = /*#__PURE__*/$6nfFC$react.createContext(null);\n\nfunction $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {\n  let context = $6nfFC$useContext($e6afbd83fe6ebbd2$var$FocusableContext) || {};\n  $6nfFC$useSyncRef(context, ref); // eslint-disable-next-line\n\n  let {\n    ref: _,\n    ...otherProps\n  } = context;\n  return otherProps;\n}\n/**\n * Provides DOM props to the nearest focusable child.\n */\n\n\nfunction $e6afbd83fe6ebbd2$var$FocusableProvider(props, ref) {\n  let {\n    children: children,\n    ...otherProps\n  } = props;\n  let context = { ...otherProps,\n    ref: ref\n  };\n  return /*#__PURE__*/$6nfFC$react.createElement($e6afbd83fe6ebbd2$var$FocusableContext.Provider, {\n    value: context\n  }, children);\n}\n\nlet $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 = /*#__PURE__*/$6nfFC$react.forwardRef($e6afbd83fe6ebbd2$var$FocusableProvider);\n\nfunction $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {\n  let {\n    focusProps: focusProps\n  } = $6nfFC$useFocus(props);\n  let {\n    keyboardProps: keyboardProps\n  } = $6nfFC$useKeyboard(props);\n  let interactions = $6nfFC$mergeProps(focusProps, keyboardProps);\n  let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = $6nfFC$useRef(props.autoFocus);\n  $6nfFC$useEffect(() => {\n    if (autoFocusRef.current && domRef.current) $6a99195332edec8b$export$80f3e147d781571c(domRef.current);\n    autoFocusRef.current = false;\n  }, [domRef]);\n  return {\n    focusableProps: $6nfFC$mergeProps({ ...interactions,\n      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n    }, interactionProps)\n  };\n}\n\nexport { $9bf71ea28793e738$export$20e40289641fbbb6 as FocusScope, $9bf71ea28793e738$export$10c5169755ce7bd7 as useFocusManager, $9bf71ea28793e738$export$2d6ec8fc375ceafa as getFocusableTreeWalker, $9bf71ea28793e738$export$c5251b9e124bf29 as createFocusManager, $907718708eab68af$export$1a38b4ad7f578e1d as FocusRing, $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 as FocusableProvider, $e6afbd83fe6ebbd2$export$4c014de7c8940b4c as useFocusable, $f7dceffc5ad7768b$export$4e328f61c538687f as useFocusRing, $6a99195332edec8b$export$80f3e147d781571c as focusSafely };","map":{"version":3,"sources":["packages/@react-aria/focus/src/FocusScope.tsx","packages/@react-aria/focus/src/focusSafely.ts","packages/@react-aria/focus/src/isElementVisible.ts","packages/@react-aria/focus/src/FocusRing.tsx","packages/@react-aria/focus/src/useFocusRing.ts","packages/@react-aria/focus/src/useFocusable.tsx"],"names":[],"mappings":";;;;;SCoBgB,yC,CAAY,O,EAA2B;EACrD;EACA;EACA;EACA;EACA;EACA,IAAI,6BAAsB,OAAO,SAAjC,EAA4C;IAC1C,IAAI,kBAAkB,GAAG,QAAQ,CAAC,aAAlC;IACA,yBAAkB,CAAA,MAAO;MACvB;MACA,IAAI,QAAQ,CAAC,aAAT,KAA2B,kBAA3B,IAAiD,QAAQ,CAAC,QAAT,CAAkB,OAAlB,CAArD,EACE,4BAAqB,CAAC,OAAD,CAArB;IAEH,CALiB,CAAlB;EAMD,CARD,MASE,4BAAqB,CAAC,OAAD,CAArB;AAEH;ACrCD;;;;;;;;;;AAAA;;;AAUG,SAEM,oCAFN,CAEqB,OAFrB,EAEuC;EACxC,IAAE,EAAI,OAAO,YAAY,WAAvB,KAAkC,EAAO,OAAO,YAAY,UAA1B,CAApC,EACE,OAAO,KAAP;EAGF,IAAI;IAAC,OAAA,EAAA,OAAD;IAAQ,UAAA,EAAE;EAAV,IAAwB,OAAO,CAAC,KAApC;EAEA,IAAI,SAAS,GACX,OAAO,KAAK,MAAZ,IACA,UAAU,KAAK,QADf,IAEA,UAAU,KAAK,UAHjB;;EAMA,IAAI,SAAJ,EAAe;IACb,MAAM;MAAC,gBAAA,EAAA;IAAD,IAAqB,OAAO,CAAC,aAAR,CAAsB,WAAjD;IACA,IAAI;MAAC,OAAO,EAAE,eAAV;MAA2B,UAAU,EAAE;IAAvC,IAA6D,gBAAgB,CAAC,OAAD,CAAjF;IAEA,SAAS,GACP,eAAe,KAAK,MAApB,IACA,kBAAkB,KAAK,QADvB,IAEA,kBAAkB,KAAK,UAHzB;EAKD;;EAED,OAAO,SAAP;AACD;;SAEQ,wC,CAAmB,O,EAAkB,Y,EAAwB;EACpE,OAAM,CACH,OAAO,CAAC,YAAR,CAAqB,QAArB,CADG,KAEH,OAAO,CAAC,QAAR,KAAqB,SAArB,IACC,YADD,IAEC,YAAY,CAAC,QAAb,KAA0B,SAF3B,GAGG,OAAO,CAAC,YAAR,CAAqB,MAArB,CAHH,GAIG,IANA,CAAN;AAQD;;SAQe,yC,CAAiB,O,EAAkB,Y,EAAwB;EACzE,OACE,OAAO,CAAC,QAAR,KAAqB,UAArB,IACA,oCAAc,CAAC,OAAD,CADd,IAEA,wCAAkB,CAAC,OAAD,EAAU,YAAV,CAFlB,KAEwC,CACtC,OAAO,CAAC,aAD8B,IACb,yCAAgB,CAAC,OAAO,CAAC,aAAT,EAAwB,OAAxB,CAH3C,CADF;AAMD;;AFID,MAAM,kCAAY,GAAA,aAAG,YAAK,CAAC,aAAN,CAAmC,IAAnC,CAArB;AAEA,IAAI,iCAAW,GAAa,IAA5B;;SAYgB,yC,CAAW,K,EAAwB;EACjD,IAAI;IAAC,QAAA,EAAA,QAAD;IAAS,OAAA,EAAE,OAAX;IAAkB,YAAA,EAAE,YAApB;IAAgC,SAAA,EAAE;EAAlC,IAA+C,KAAnD;EACA,IAAI,QAAQ,GAAG,aAAM,EAArB;EACA,IAAI,MAAM,GAAG,aAAM,EAAnB;EACA,IAAI,QAAQ,GAAG,aAAM,CAAY,EAAZ,CAArB;EACA,IAAI,GAAG,GAAG,iBAAU,CAAC,kCAAD,CAApB;MAEkB,G,CAP+B,CAMjD;;EACA,IAAI,WAAW,GAAA,CAAG,GAAa,GAAb,GAAG,KAAA,IAAH,IAAA,GAAG,KAAH,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,GAAG,CAAE,QAAR,MAAgB,IAAhB,IAAG,GAAa,KAAA,KAAA,CAAhB,GAAG,GAAH,GAAoB,IAAnC;EAEA,sBAAe,CAAA,MAAO;IACpB;IACA,IAAI,IAAI,GAAG,QAAQ,CAAC,OAAT,CAAiB,WAA5B;IACA,IAAI,KAAK,GAAG,EAAZ;;WACO,IAAI,IAAI,IAAI,KAAK,MAAM,CAAC,O,EAAS;MACtC,KAAK,CAAC,IAAN,CAAW,IAAX;MACA,IAAI,GAAG,IAAI,CAAC,WAAZ;IACD;;IAED,QAAQ,CAAC,OAAT,GAAmB,KAAnB;EACD,CAVc,EAUZ,CAAC,QAAD,EAAW,WAAX,CAVY,CAAf,CATiD,CAqBjD;EACA;;EACA,IAAI,yCAAc,CAAC,WAAf,CAA2B,WAA3B,KAAsC,CAAM,yCAAc,CAAC,WAAf,CAA2B,QAA3B,CAAhD,EACE,yCAAc,CAAC,WAAf,CAA2B,QAA3B,EAAqC,WAArC;EAGF,IAAI,KAAI,GAAG,yCAAc,CAAC,WAAf,CAA2B,QAA3B,CAAX;EACA,KAAI,CAAC,OAAL,GAAe,OAAf;EAEA,yCAAmB,CAAC,QAAD,EAAW,OAAX,CAAnB;EACA,qCAAe,CAAC,QAAD,EAAW,YAAX,EAAyB,OAAzB,CAAf;EACA,kCAAY,CAAC,QAAD,EAAW,SAAX,CAAZ,CAhCiD,CAkCjD;;EACA,sBAAe,CAAA,MAAO;IACpB,IAAI,QAAQ,KAAK,WAAW,IAAI,WAAW,IAAI,IAAnC,CAAZ,EACE,OAAM,MAAO;MACX;MACA;MACA;MACA,IAAE,CACC,QAAQ,KAAK,iCAAb,IAA4B,qCAAe,CAAC,QAAD,EAAW,iCAAX,CAD5C,MACkE,CAChE,WADgE,IACjD,yCAAc,CAAC,WAAf,CAA2B,WAA3B,CAFjB,CAAF,EAIE,iCAAW,GAAG,WAAd;MAEF,yCAAc,CAAC,cAAf,CAA8B,QAA9B;IACD,CAXD;EAaH,CAfc,EAeZ,CAAC,QAAD,EAAW,WAAX,CAfY,CAAf;EAiBA,IAAI,YAAY,GAAG,gDAA0B,CAAC,QAAD,CAA7C;EAEA,OAAM,aAAA,YAAA,CAAA,aAAA,CACH,kCAAY,CAAC,QADV,EACkB;IAAC,KAAK,EAAE;gBAAC,QAAD;oBAAW;IAAX;EAAR,CADlB,E,wCAED,M,EAAI;IAAC,0BAAA,IAAD;IAAwB,MAAM,EAAN,IAAxB;IAA+B,GAAG,EAAE;EAApC,C,CAFH,EAGD,QAHC,EAGO,aAAA,YAAA,CAAA,aAAA,CACR,MADQ,EACJ;IAAC,wBAAA,IAAD;IAAsB,MAAM,EAAN,IAAtB;IAA6B,GAAG,EAAE;EAAlC,CADI,CAHP,CAAN;AAOD;;SAOe,yC,GAAgC;MACvC,G;EAAP,OAAM,CAAC,GAAwB,GAAxB,iBAAU,CAAC,kCAAD,CAAX,MAAwB,IAAxB,IAAC,GAAwB,KAAxB,KAAA,CAAD,GAAC,KAAA,CAAD,GAAC,GAAwB,CAAE,YAAjC;AACD;;SAEQ,gD,CAA2B,Q,EAAoD;EACtF,OAAO;IACL,SAAS,GAAiC;MAAA,IAAhC,IAAgC,uEAAJ,EAAI;MACxC,IAAI,KAAK,GAAG,QAAQ,CAAC,OAArB;MACA,IAAI;QAAC,IAAA,EAAA,IAAD;QAAK,QAAA,EAAE,QAAP;QAAe,IAAA,EAAE,IAAjB;QAAqB,MAAA,EAAE;MAAvB,IAAiC,IAArC;MACA,IAAI,IAAI,GAAG,IAAI,IAAI,QAAQ,CAAC,aAA5B;MACA,IAAI,QAAQ,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,sBAAxB;MACA,IAAI,MAAM,GAAG,yCAAsB,CAAC,kCAAY,CAAC,KAAD,CAAb,EAAsB;kBAAC,QAAD;gBAAW;MAAX,CAAtB,EAA0C,KAA1C,CAAnC;MACA,MAAM,CAAC,WAAP,GAAqB,sCAAgB,CAAC,IAAD,EAAO,KAAP,CAAhB,GAAgC,IAAhC,GAAuC,QAA5D;MACA,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAP,EAAf;;MACA,IAAE,CAAG,QAAH,IAAe,IAAjB,EAAuB;QACrB,MAAM,CAAC,WAAP,GAAqB,QAArB;QACA,QAAQ,GAAG,MAAM,CAAC,QAAP,EAAX;MACD;;MACD,IAAI,QAAJ,EACE,kCAAY,CAAC,QAAD,EAAW,IAAX,CAAZ;MAEF,OAAO,QAAP;IACD,CAjBI;;IAkBL,aAAa,GAAiC;MAAA,IAAhC,IAAgC,uEAAJ,EAAI;MAC5C,IAAI,KAAK,GAAG,QAAQ,CAAC,OAArB;MACA,IAAI;QAAC,IAAA,EAAA,IAAD;QAAK,QAAA,EAAE,QAAP;QAAe,IAAA,EAAE,IAAjB;QAAqB,MAAA,EAAE;MAAvB,IAAiC,IAArC;MACA,IAAI,IAAI,GAAG,IAAI,IAAI,QAAQ,CAAC,aAA5B;MACA,IAAI,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAL,CAAwB,kBAAvC;MACA,IAAI,MAAM,GAAG,yCAAsB,CAAC,kCAAY,CAAC,KAAD,CAAb,EAAsB;kBAAC,QAAD;gBAAW;MAAX,CAAtB,EAA0C,KAA1C,CAAnC;MACA,MAAM,CAAC,WAAP,GAAqB,sCAAgB,CAAC,IAAD,EAAO,KAAP,CAAhB,GAAgC,IAAhC,GAAuC,QAA5D;MACA,IAAI,YAAY,GAAG,MAAM,CAAC,YAAP,EAAnB;;MACA,IAAE,CAAG,YAAH,IAAmB,IAArB,EAA2B;QACzB,MAAM,CAAC,WAAP,GAAqB,QAArB;QACA,YAAY,GAAG,MAAM,CAAC,YAAP,EAAf;MACD;;MACD,IAAI,YAAJ,EACE,kCAAY,CAAC,YAAD,EAAe,IAAf,CAAZ;MAEF,OAAO,YAAP;IACD,CAlCI;;IAmCL,UAAU,GAAY;MAAA,IAAX,IAAW,uEAAJ,EAAI;MACpB,IAAI,KAAK,GAAG,QAAQ,CAAC,OAArB;MACA,IAAI;QAAC,QAAA,EAAA,QAAD;QAAS,MAAA,EAAE;MAAX,IAAqB,IAAzB;MACA,IAAI,MAAM,GAAG,yCAAsB,CAAC,kCAAY,CAAC,KAAD,CAAb,EAAsB;kBAAC,QAAD;gBAAW;MAAX,CAAtB,EAA0C,KAA1C,CAAnC;MACA,MAAM,CAAC,WAAP,GAAqB,KAAK,CAAC,CAAD,CAAL,CAAS,sBAA9B;MACA,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAP,EAAf;MACA,IAAI,QAAJ,EACE,kCAAY,CAAC,QAAD,EAAW,IAAX,CAAZ;MAEF,OAAO,QAAP;IACD,CA7CI;;IA8CL,SAAS,GAAY;MAAA,IAAX,IAAW,uEAAJ,EAAI;MACnB,IAAI,KAAK,GAAG,QAAQ,CAAC,OAArB;MACA,IAAI;QAAC,QAAA,EAAA,QAAD;QAAS,MAAA,EAAE;MAAX,IAAqB,IAAzB;MACA,IAAI,MAAM,GAAG,yCAAsB,CAAC,kCAAY,CAAC,KAAD,CAAb,EAAsB;kBAAC,QAAD;gBAAW;MAAX,CAAtB,EAA0C,KAA1C,CAAnC;MACA,MAAM,CAAC,WAAP,GAAqB,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAL,CAAwB,kBAA7C;MACA,IAAI,YAAY,GAAG,MAAM,CAAC,YAAP,EAAnB;MACA,IAAI,YAAJ,EACE,kCAAY,CAAC,YAAD,EAAe,IAAf,CAAZ;MAEF,OAAO,YAAP;IACD;;EAxDI,CAAP;AA0DD;;AAED,MAAM,uCAAiB,GAAG,CACxB,0CADwB,EAExB,wBAFwB,EAGxB,0BAHwB,EAIxB,wBAJwB,EAKxB,SALwB,EAMxB,YANwB,EAOxB,SAPwB,EAQxB,QARwB,EASxB,QATwB,EAUxB,OAVwB,EAWxB,iBAXwB,EAYxB,iBAZwB,EAaxB,mBAbwB,CAA1B;AAgBA,MAAM,gDAA0B,GAAG,uCAAiB,CAAC,IAAlB,CAAuB,iBAAvB,IAA4C,2CAA/E;AAEA,uCAAiB,CAAC,IAAlB,CAAuB,iDAAvB;AACA,MAAM,+CAAyB,GAAG,uCAAiB,CAAC,IAAlB,CAAuB,sCAAvB,CAAlC;;SAES,kC,CAAa,K,EAAkB;EACtC,OAAO,KAAK,CAAC,CAAD,CAAL,CAAS,aAAhB;AACD;;SAEQ,wC,CAAmB,Q,EAAoB;EAC9C,IAAI,KAAK,GAAG,yCAAc,CAAC,WAAf,CAA2B,iCAA3B,CAAZ;;SACO,KAAK,IAAI,KAAK,CAAC,QAAN,KAAmB,Q,EAAU;IAC3C,IAAI,KAAK,CAAC,OAAV,EACE,OAAO,KAAP;IAGF,KAAK,GAAG,KAAK,CAAC,MAAd;EACD;;EAED,OAAO,IAAP;AACD;;SAEQ,yC,CAAoB,Q,EAAgC,O,EAAkB;EAC7E,IAAI,WAAW,GAAG,aAAM,EAAxB;EAEA,IAAI,GAAG,GAAG,aAAM,CAAC,IAAD,CAAhB;EACA,sBAAe,CAAA,MAAO;IACpB,IAAI,MAAK,GAAG,QAAQ,CAAC,OAArB;;IACA,IAAE,CAAG,OAAL,EAAc;MACZ;MACA,IAAI,GAAG,CAAC,OAAR,EAAiB;QACf,oBAAoB,CAAC,GAAG,CAAC,OAAL,CAApB;QACA,GAAG,CAAC,OAAJ,GAAc,IAAd;MACD;;MACD;IACD,CATmB,CAWpB;;;IACA,IAAI,SAAS,GAAI,CAAJ,IAAU;MACrB,IAAI,CAAC,CAAC,GAAF,KAAU,KAAV,IAAmB,CAAC,CAAC,MAArB,IAA+B,CAAC,CAAC,OAAjC,IAA4C,CAAC,CAAC,OAA9C,IAAqD,CAAK,wCAAkB,CAAC,QAAD,CAAhF,EACE;MAGF,IAAI,cAAc,GAAG,QAAQ,CAAC,aAA9B;MACA,IAAI,KAAK,GAAG,QAAQ,CAAC,OAArB;MACA,IAAE,CAAG,sCAAgB,CAAC,cAAD,EAAiB,KAAjB,CAArB,EACE;MAGF,IAAI,MAAM,GAAG,yCAAsB,CAAC,kCAAY,CAAC,KAAD,CAAb,EAAsB;QAAC,QAAQ,EAAE;MAAX,CAAtB,EAAwC,KAAxC,CAAnC;MACA,MAAM,CAAC,WAAP,GAAqB,cAArB;MACA,IAAI,WAAW,GAAI,CAAC,CAAC,QAAF,GAAa,MAAM,CAAC,YAAP,EAAb,GAAqC,MAAM,CAAC,QAAP,EAAxD;;MACA,IAAE,CAAG,WAAL,EAAkB;QAChB,MAAM,CAAC,WAAP,GAAqB,CAAC,CAAC,QAAF,GAAa,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAL,CAAwB,kBAArC,GAA0D,KAAK,CAAC,CAAD,CAAL,CAAS,sBAAxF;QACA,WAAW,GAAI,CAAC,CAAC,QAAF,GAAa,MAAM,CAAC,YAAP,EAAb,GAAqC,MAAM,CAAC,QAAP,EAApD;MACD;;MAED,CAAC,CAAC,cAAF;MACA,IAAI,WAAJ,EACE,kCAAY,CAAC,WAAD,EAAc,IAAd,CAAZ;IAEH,CAvBD;;IAyBA,IAAI,OAAO,GAAI,CAAJ,IAAU;MACnB;MACA;MACA,IAAE,CAAG,iCAAH,IAAkB,qCAAe,CAAC,iCAAD,EAAc,QAAd,CAAnC,EAA4D;QAC1D,iCAAW,GAAG,QAAd;QACA,WAAW,CAAC,OAAZ,GAAsB,CAAC,CAAC,MAAxB;MACD,CAHD,MAGO,IAAI,wCAAkB,CAAC,QAAD,CAAlB,IAA2B,CAAM,2CAAqB,CAAC,CAAC,CAAC,MAAH,EAAW,QAAX,CAA1D,EAAgF;QACrF;QACA;QACA,IAAI,WAAW,CAAC,OAAhB,EACE,WAAW,CAAC,OAAZ,CAAoB,KAApB,GADF,KAEO,IAAI,iCAAJ,EACL,uCAAiB,CAAC,iCAAW,CAAC,OAAb,CAAjB;MAEH,CARM,MAQA,IAAI,wCAAkB,CAAC,QAAD,CAAtB,EACL,WAAW,CAAC,OAAZ,GAAsB,CAAC,CAAC,MAAxB;IAEH,CAjBD;;IAmBA,IAAI,MAAM,GAAI,CAAJ,IAAU;MAClB;MACA,GAAG,CAAC,OAAJ,GAAc,qBAAqB,CAAA,MAAO;QACxC;QACA,IAAI,wCAAkB,CAAC,QAAD,CAAlB,IAA2B,CAAM,2CAAqB,CAAC,QAAQ,CAAC,aAAV,EAAyB,QAAzB,CAA1D,EAA8F;UAC5F,iCAAW,GAAG,QAAd;;UACA,IAAI,QAAQ,CAAC,IAAT,CAAc,QAAd,CAAuB,CAAC,CAAC,MAAzB,CAAJ,EAAsC;YACpC,WAAW,CAAC,OAAZ,GAAsB,CAAC,CAAC,MAAxB;YACA,WAAW,CAAC,OAAZ,CAAoB,KAApB;UACD,CAHD,MAGO,IAAI,iCAAJ,EACL,uCAAiB,CAAC,iCAAW,CAAC,OAAb,CAAjB;QAEH;MACF,CAXkC,CAAnC;IAYD,CAdD;;IAgBA,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,EAAqC,SAArC,EAAgD,KAAhD;IACA,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,EAAqC,OAArC,EAA8C,KAA9C;IACA,MAAK,CAAC,OAAN,CAAc,OAAD,IAAY,OAAO,CAAC,gBAAR,CAAyB,SAAzB,EAAoC,OAApC,EAA6C,KAA7C,CAAzB;IACA,MAAK,CAAC,OAAN,CAAc,OAAD,IAAY,OAAO,CAAC,gBAAR,CAAyB,UAAzB,EAAqC,MAArC,EAA6C,KAA7C,CAAzB;IACA,OAAM,MAAO;MACX,QAAQ,CAAC,mBAAT,CAA6B,SAA7B,EAAwC,SAAxC,EAAmD,KAAnD;MACA,QAAQ,CAAC,mBAAT,CAA6B,SAA7B,EAAwC,OAAxC,EAAiD,KAAjD;MACA,MAAK,CAAC,OAAN,CAAc,OAAD,IAAY,OAAO,CAAC,mBAAR,CAA4B,SAA5B,EAAuC,OAAvC,EAAgD,KAAhD,CAAzB;MACA,MAAK,CAAC,OAAN,CAAc,OAAD,IAAY,OAAO,CAAC,mBAAR,CAA4B,UAA5B,EAAwC,MAAxC,EAAgD,KAAhD,CAAzB;IACD,CALD;EAMD,CAlFc,EAkFZ,CAAC,QAAD,EAAW,OAAX,CAlFY,CAAf,CAJ6E,CAwF7E;;EACA,gBAAS,CAAA,MAAO;IACd,OAAM,MAAO;MACX,IAAI,GAAG,CAAC,OAAR,EACE,oBAAoB,CAAC,GAAG,CAAC,OAAL,CAApB;IAEH,CAJD;EAKD,CANQ,EAMN,CAAC,GAAD,CANM,CAAT;AAOD;;SAEQ,yC,CAAoB,O,EAAkB;EAC7C,OAAO,2CAAqB,CAAC,OAAD,CAA5B;AACD;;SAEQ,sC,CAAiB,O,EAAkB,K,EAAkB;EAC5D,OAAO,KAAK,CAAC,IAAN,CAAW,IAAD,IAAS,IAAI,CAAC,QAAL,CAAc,OAAd,CAAnB,CAAP;AACD;;SAEQ,2C,CAAsB,O,EAA0C;EAAA,IAAxB,KAAwB,uEAAN,IAAM;;EACvE;EACA;EACA,KAAK,IAAI;IAAC,QAAQ,EAAE;EAAX,CAAT,IAA0B,yCAAc,CAAC,QAAf,CAAwB,yCAAc,CAAC,WAAf,CAA2B,KAA3B,CAAxB,CAA1B,EAAsF;IACpF,IAAI,sCAAgB,CAAC,OAAD,EAAU,CAAC,CAAC,OAAZ,CAApB,EACE,OAAO,IAAP;EAEH;;EAED,OAAO,KAAP;AACD;;SAEQ,qC,CAAgB,Q,EAAoB,K,EAAiB;MAC/C,G;EAAb,IAAI,MAAM,GAAA,CAAG,GAAiC,GAAjC,yCAAc,CAAC,WAAf,CAA2B,KAA3B,CAAH,MAAmC,IAAnC,IAAG,GAAiC,KAAjC,KAAA,CAAH,GAAG,KAAA,CAAH,GAAG,GAAiC,CAAE,MAAhD;;SACO,M,EAAQ;IACb,IAAI,MAAM,CAAC,QAAP,KAAoB,QAAxB,EACE,OAAO,IAAP;IAEF,MAAM,GAAG,MAAM,CAAC,MAAhB;EACD;;EACD,OAAO,KAAP;AACD;;SAEQ,kC,CAAa,O,EAAkD;EAAA,IAAhB,MAAgB,uEAAP,KAAO;EACtE,IAAI,OAAO,IAAI,IAAX,IAAe,CAAK,MAAxB,EACE,IAAI;IACF,yCAAW,CAAC,OAAD,CAAX;EACD,CAFD,CAEE,OAAO,GAAP,EAAY,CACZ;EACD,CALH,MAMO,IAAI,OAAO,IAAI,IAAf,EACL,IAAI;IACF,OAAO,CAAC,KAAR;EACD,CAFD,CAEE,OAAO,IAAP,EAAY,CACZ;EACD;AAEJ;;SAEQ,uC,CAAkB,K,EAA2C;EAAA,IAAzB,QAAyB,uEAAN,IAAM;EACpE,IAAI,QAAQ,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,sBAAxB;EACA,IAAI,MAAM,GAAG,yCAAsB,CAAC,kCAAY,CAAC,KAAD,CAAb,EAAsB;cAAC;EAAD,CAAtB,EAAkC,KAAlC,CAAnC;EACA,MAAM,CAAC,WAAP,GAAqB,QAArB;EACA,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAP,EAAf,CAJoE,CAMpE;;EACA,IAAI,QAAQ,IAAA,CAAK,QAAjB,EAA2B;IACzB,MAAM,GAAG,yCAAsB,CAAC,kCAAY,CAAC,KAAD,CAAb,EAAsB;MAAC,QAAQ,EAAE;IAAX,CAAtB,EAAyC,KAAzC,CAA/B;IACA,MAAM,CAAC,WAAP,GAAqB,QAArB;IACA,QAAQ,GAAG,MAAM,CAAC,QAAP,EAAX;EACD;;EAED,kCAAY,CAAC,QAAD,CAAZ;AACD;;SAEQ,kC,CAAa,Q,EAAgC,S,EAAoB;EACxE,MAAM,YAAY,GAAG,YAAK,CAAC,MAAN,CAAa,SAAb,CAArB;EACA,gBAAS,CAAA,MAAO;IACd,IAAI,YAAY,CAAC,OAAjB,EAA0B;MACxB,iCAAW,GAAG,QAAd;MACA,IAAE,CAAG,sCAAgB,CAAC,QAAQ,CAAC,aAAV,EAAyB,iCAAW,CAAC,OAArC,CAArB,EACE,uCAAiB,CAAC,QAAQ,CAAC,OAAV,CAAjB;IAEH;;IACD,YAAY,CAAC,OAAb,GAAuB,KAAvB;EACD,CARQ,EAQN,CAAC,QAAD,CARM,CAAT;AASD;;SAEQ,qC,CAAgB,Q,EAAgC,Y,EAAuB,O,EAAkB;EAChG;EACA,MAAM,gBAAgB,GAAG,aAAM,CAAC,OAAO,QAAP,KAAoB,WAApB,GAAkC,QAAQ,CAAC,aAA3C,GAA+E,IAAhF,CAA/B,CAFgG,CAIhG;EACA;;EACA,sBAAe,CAAA,MAAO;IACpB,IAAI,KAAK,GAAG,QAAQ,CAAC,OAArB;IACA,IAAE,CAAG,YAAH,IAAmB,OAArB,EACE;;IAGF,IAAI,OAAO,GAAA,MAAS;MAClB;MACA;MACA,IAAE,CAAG,iCAAH,IAAkB,qCAAe,CAAC,iCAAD,EAAc,QAAd,CAAnC,EACE,iCAAW,GAAG,QAAd;IAEH,CAND;;IAQA,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,EAAqC,OAArC,EAA8C,KAA9C;IACA,KAAK,CAAC,OAAN,CAAc,OAAD,IAAY,OAAO,CAAC,gBAAR,CAAyB,SAAzB,EAAoC,OAApC,EAA6C,KAA7C,CAAzB;IACA,OAAM,MAAO;MACX,QAAQ,CAAC,mBAAT,CAA6B,SAA7B,EAAwC,OAAxC,EAAiD,KAAjD;MACA,KAAK,CAAC,OAAN,CAAc,OAAD,IAAY,OAAO,CAAC,mBAAR,CAA4B,SAA5B,EAAuC,OAAvC,EAAgD,KAAhD,CAAzB;IACD,CAHD;EAID,CApBc,EAoBZ,CAAC,QAAD,EAAW,OAAX,CApBY,CAAf,CANgG,CA4BhG;;EACA,sBAAe,CAAA,MAAO;IACpB,yCAAc,CAAC,WAAf,CAA2B,QAA3B,EAAqC,aAArC,GAAqD,gBAAgB,CAAC,OAAtE;IACA,IAAE,CAAG,YAAL,EACE,OAHkB,CAMpB;IACA;IACA;IACA;;IACA,IAAI,SAAS,GAAI,CAAJ,IAAyB;MACpC,IAAI,CAAC,CAAC,GAAF,KAAU,KAAV,IAAmB,CAAC,CAAC,MAArB,IAA+B,CAAC,CAAC,OAAjC,IAA4C,CAAC,CAAC,OAAlD,EACE;MAGF,IAAI,cAAc,GAAG,QAAQ,CAAC,aAA9B;MACA,IAAE,CAAG,sCAAgB,CAAC,cAAD,EAAiB,QAAQ,CAAC,OAA1B,CAArB,EACE;MAEF,IAAI,aAAa,GAAG,yCAAc,CAAC,WAAf,CAA2B,QAA3B,EAAqC,aAAzD,CAToC,CAWpC;;MACA,IAAI,MAAM,GAAG,yCAAsB,CAAC,QAAQ,CAAC,IAAV,EAAgB;QAAC,QAAQ,EAAE;MAAX,CAAhB,CAAnC,CAZoC,CAcpC;;MACA,MAAM,CAAC,WAAP,GAAqB,cAArB;MACA,IAAI,WAAW,GAAI,CAAC,CAAC,QAAF,GAAa,MAAM,CAAC,YAAP,EAAb,GAAqC,MAAM,CAAC,QAAP,EAAxD;;MAEA,IAAE,CAAG,QAAQ,CAAC,IAAT,CAAc,QAAd,CAAuB,aAAvB,CAAH,IAA4C,aAAa,KAAK,QAAQ,CAAC,IAAzE,EAA+E;QAC7E,aAAa,GAAG,IAAhB;QACA,yCAAc,CAAC,WAAf,CAA2B,QAA3B,EAAqC,aAArC,GAAqD,IAArD;MACD,CArBmC,CAuBpC;MACA;;;MACA,IAAE,CAAA,CAAI,WAAJ,IAAe,CAAK,sCAAgB,CAAC,WAAD,EAAc,QAAQ,CAAC,OAAvB,CAApC,KAAwE,aAA1E,EAAyF;QACvF,MAAM,CAAC,WAAP,GAAqB,aAArB,CADuF,CAGvF;;WAEE,WAAW,GAAI,CAAC,CAAC,QAAF,GAAa,MAAM,CAAC,YAAP,EAAb,GAAqC,MAAM,CAAC,QAAP,EAApD,C,QACO,sCAAgB,CAAC,WAAD,EAAc,QAAQ,CAAC,OAAvB,C;;QAEzB,CAAC,CAAC,cAAF;QACA,CAAC,CAAC,eAAF;QACA,IAAI,WAAJ,EACE,kCAAY,CAAC,WAAD,EAAc,IAAd,CAAZ,CADF,KAGG;UACA;UACA;UACD,IAAE,CAAG,yCAAmB,CAAC,aAAD,CAAxB,EACE,cAAc,CAAC,IAAf,GADF,KAGE,kCAAY,CAAC,aAAD,EAAgB,IAAhB,CAAZ;MAGL;IACF,CAhDD;;IAkDA,IAAE,CAAG,OAAL,EACE,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,EAAqC,SAArC,EAAgD,IAAhD;IAGF,OAAM,MAAO;MACX,IAAE,CAAG,OAAL,EACE,QAAQ,CAAC,mBAAT,CAA6B,SAA7B,EAAwC,SAAxC,EAAmD,IAAnD;MAEF,IAAI,aAAa,GAAG,yCAAc,CAAC,WAAf,CAA2B,QAA3B,EAAqC,aAAzD,CAJW,CAMX;;MACA,IACE,YAAY,IACT,aADH,KAGE,sCAAgB,CAAC,QAAQ,CAAC,aAAV,EAAyB,QAAQ,CAAC,OAAlC,CAAhB,IACI,QAAQ,CAAC,aAAT,KAA2B,QAAQ,CAAC,IAApC,IAA4C,iCAAW,KAAK,QAJlE,CADF,EAOE;QACA;QACA,IAAI,UAAU,GAAG,yCAAc,CAAC,KAAf,EAAjB;QACA,qBAAqB,CAAA,MAAO;UAC1B;UACA,IAAI,QAAQ,CAAC,aAAT,KAA2B,QAAQ,CAAC,IAAxC,EAA8C;YAC5C;YACA,IAAI,QAAQ,GAAG,UAAU,CAAC,WAAX,CAAuB,QAAvB,CAAf;;mBACO,Q,EAAU;cACf,IAAI,QAAQ,CAAC,aAAT,IAA0B,QAAQ,CAAC,IAAT,CAAc,QAAd,CAAuB,QAAQ,CAAC,aAAhC,CAA9B,EAA8E;gBAC5E,kCAAY,CAAC,QAAQ,CAAC,aAAV,CAAZ;gBACA;cACD;;cACD,QAAQ,GAAG,QAAQ,CAAC,MAApB;YACD;UACF;QACF,CAboB,CAArB;MAcD;IACF,CAhCD;EAiCD,CAjGc,EAiGZ,CAAC,QAAD,EAAW,YAAX,EAAyB,OAAzB,CAjGY,CAAf;AAkGD;;SAMe,yC,CAAuB,I,EAAe,I,EAA4B,K,EAAmB;EACnG,IAAI,QAAQ,GAAA,CAAG,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAE,QAAT,IAAoB,+CAApB,GAAgD,gDAA5D;EACA,IAAI,MAAM,GAAG,QAAQ,CAAC,gBAAT,CACX,IADW,EAEX,UAAU,CAAC,YAFA,EAGX;IACE,UAAU,CAAC,IAAD,EAAO;UAEX,G,CAFW,CACf;;MACA,IAAI,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAU,CAAV,GAAU,GAAV,IAAI,CAAE,IAAI,MAAA,IAAA,IAAV,GAAU,KAAV,KAAA,CAAU,GAAV,KAAA,CAAU,GAAV,GAAU,CAAE,QAAZ,CAAqB,IAArB,CAAJ,EACE,OAAO,UAAU,CAAC,aAAlB;MAGF,IAAK,IAAI,CAAa,OAAjB,CAAyB,QAAzB,KACA,yCAAgB,CAAC,IAAD,CADhB,KACqB,CACnB,KADmB,IACV,sCAAgB,CAAC,IAAD,EAAkB,KAAlB,CAF3B,MAEkD,EAChD,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAE,MAD0C,KAChC,IAAI,CAAC,MAAL,CAAY,IAAZ,CAHlB,CAAL,EAKE,OAAO,UAAU,CAAC,aAAlB;MAGF,OAAO,UAAU,CAAC,WAAlB;IACD;;EAhBH,CAHW,CAAb;EAuBA,IAAI,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAJ,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAI,CAAE,IAAV,EACE,MAAM,CAAC,WAAP,GAAqB,IAAI,CAAC,IAA1B;EAGF,OAAO,MAAP;AACD;;SAKe,wC,CAAmB,G,EAAiF;EAAA,IAAxD,cAAwD,uEAAlB,EAAkB;EAClH,OAAO;IACL,SAAS,GAAiC;MAAA,IAAhC,IAAgC,uEAAJ,EAAI;MACxC,IAAI,IAAI,GAAG,GAAG,CAAC,OAAf;MACA,IAAE,CAAG,IAAL,EACE;MAEF,IAAI;QAAC,IAAA,EAAA,IAAD;QAAO,QAAQ,GAAG,cAAc,CAAC,QAAjC;QAA2C,IAAI,GAAG,cAAc,CAAC,IAAjE;QAAuE,MAAM,GAAG,cAAc,CAAC;MAA/F,IAAyG,IAA7G;MACA,IAAI,IAAI,GAAG,IAAI,IAAI,QAAQ,CAAC,aAA5B;MACA,IAAI,MAAM,GAAG,yCAAsB,CAAC,IAAD,EAAO;kBAAC,QAAD;gBAAW;MAAX,CAAP,CAAnC;MACA,IAAI,IAAI,CAAC,QAAL,CAAc,IAAd,CAAJ,EACE,MAAM,CAAC,WAAP,GAAqB,IAArB;MAEF,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAP,EAAf;;MACA,IAAE,CAAG,QAAH,IAAe,IAAjB,EAAuB;QACrB,MAAM,CAAC,WAAP,GAAqB,IAArB;QACA,QAAQ,GAAG,MAAM,CAAC,QAAP,EAAX;MACD;;MACD,IAAI,QAAJ,EACE,kCAAY,CAAC,QAAD,EAAW,IAAX,CAAZ;MAEF,OAAO,QAAP;IACD,CArBI;;IAsBL,aAAa,GAA6C;MAAA,IAA5C,IAA4C,uEAAhB,cAAgB;MACxD,IAAI,IAAI,GAAG,GAAG,CAAC,OAAf;MACA,IAAE,CAAG,IAAL,EACE;MAEF,IAAI;QAAC,IAAA,EAAA,IAAD;QAAO,QAAQ,GAAG,cAAc,CAAC,QAAjC;QAA2C,IAAI,GAAG,cAAc,CAAC,IAAjE;QAAuE,MAAM,GAAG,cAAc,CAAC;MAA/F,IAAyG,IAA7G;MACA,IAAI,IAAI,GAAG,IAAI,IAAI,QAAQ,CAAC,aAA5B;MACA,IAAI,MAAM,GAAG,yCAAsB,CAAC,IAAD,EAAO;kBAAC,QAAD;gBAAW;MAAX,CAAP,CAAnC;MACA,IAAI,IAAI,CAAC,QAAL,CAAc,IAAd,CAAJ,EACE,MAAM,CAAC,WAAP,GAAqB,IAArB,CADF,KAEO;QACL,IAAI,IAAI,GAAG,0BAAI,CAAC,MAAD,CAAf;QACA,IAAI,IAAJ,EACE,kCAAY,CAAC,IAAD,EAAO,IAAP,CAAZ;QAEF,OAAO,IAAP;MACD;MACD,IAAI,YAAY,GAAG,MAAM,CAAC,YAAP,EAAnB;;MACA,IAAE,CAAG,YAAH,IAAmB,IAArB,EAA2B;QACzB,MAAM,CAAC,WAAP,GAAqB,IAArB;QACA,YAAY,GAAG,0BAAI,CAAC,MAAD,CAAnB;MACD;;MACD,IAAI,YAAJ,EACE,kCAAY,CAAC,YAAD,EAAe,IAAf,CAAZ;MAEF,OAAO,YAAP;IACD,CAhDI;;IAiDL,UAAU,GAAwB;MAAA,IAAvB,IAAuB,uEAAhB,cAAgB;MAChC,IAAI,IAAI,GAAG,GAAG,CAAC,OAAf;MACA,IAAE,CAAG,IAAL,EACE;MAEF,IAAI;QAAC,QAAQ,GAAG,cAAc,CAAC,QAA3B;QAAqC,MAAM,GAAG,cAAc,CAAC;MAA7D,IAAuE,IAA3E;MACA,IAAI,MAAM,GAAG,yCAAsB,CAAC,IAAD,EAAO;kBAAC,QAAD;gBAAW;MAAX,CAAP,CAAnC;MACA,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAP,EAAf;MACA,IAAI,QAAJ,EACE,kCAAY,CAAC,QAAD,EAAW,IAAX,CAAZ;MAEF,OAAO,QAAP;IACD,CA7DI;;IA8DL,SAAS,GAAwB;MAAA,IAAvB,IAAuB,uEAAhB,cAAgB;MAC/B,IAAI,IAAI,GAAG,GAAG,CAAC,OAAf;MACA,IAAE,CAAG,IAAL,EACE;MAEF,IAAI;QAAC,QAAQ,GAAG,cAAc,CAAC,QAA3B;QAAqC,MAAM,GAAG,cAAc,CAAC;MAA7D,IAAuE,IAA3E;MACA,IAAI,MAAM,GAAG,yCAAsB,CAAC,IAAD,EAAO;kBAAC,QAAD;gBAAW;MAAX,CAAP,CAAnC;MACA,IAAI,IAAI,GAAG,0BAAI,CAAC,MAAD,CAAf;MACA,IAAI,IAAJ,EACE,kCAAY,CAAC,IAAD,EAAO,IAAP,CAAZ;MAEF,OAAO,IAAP;IACD;;EA1EI,CAAP;AA4ED;;SAEQ,0B,CAAK,M,EAAoB;EAChC,IAAI,IAAJ;EACA,IAAI,IAAJ;;KACG;IACD,IAAI,GAAG,MAAM,CAAC,SAAP,EAAP;IACA,IAAI,IAAJ,EACE,IAAI,GAAG,IAAP;EAEH,C,QAAQ,I;;EACT,OAAO,IAAP;AACD;;MAGK,0B,CAAI;EASA,IAAJ,IAAI,GAAG;IACT,OAAO,KAAK,OAAL,CAAa,IAApB;EACD;;EAED,WAAW,CAAC,IAAD,EAAiB;IAC1B,OAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,IAAjB,CAAP;EACD;;EAED,WAAW,CAAC,QAAD,EAAqB,MAArB,EAAuC,aAAvC,EAAyE;IAClF,IAAI,UAAU,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAA,MAAA,GAAU,IAA3B,CAAjB;IACA,IAAI,IAAI,GAAG,IAAI,8BAAJ,CAAa;gBAAC;IAAD,CAAb,CAAX;IACA,UAAU,CAAC,QAAX,CAAoB,IAApB;IACA,IAAI,CAAC,MAAL,GAAc,UAAd;IACA,KAAK,OAAL,CAAa,GAAb,CAAiB,QAAjB,EAA2B,IAA3B;IACA,IAAI,aAAJ,EACE,IAAI,CAAC,aAAL,GAAqB,aAArB;EAEH;;EAED,cAAc,CAAC,QAAD,EAAqB;IACjC;IACA,IAAI,QAAQ,KAAK,IAAjB,EACE;IAEF,IAAI,IAAI,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,QAAjB,CAAX;IACA,IAAI,UAAU,GAAG,IAAI,CAAC,MAAtB,CANiC,CAOjC;IACA;;IACA,KAAK,IAAI,OAAT,IAAoB,KAAK,QAAL,EAApB,EACE,IACE,OAAO,KAAK,IAAZ,IACA,IAAI,CAAC,aADL,IAEA,OAAO,CAAC,aAFR,IAGA,IAAI,CAAC,QAAL,CAAc,OAHd,IAIA,sCAAgB,CAAC,OAAO,CAAC,aAAT,EAAwB,IAAI,CAAC,QAAL,CAAc,OAAtC,CALlB,EAOE,OAAO,CAAC,aAAR,GAAwB,IAAI,CAAC,aAA7B;;IAGJ,IAAI,QAAQ,GAAG,IAAI,CAAC,QAApB;IACA,UAAU,CAAC,WAAX,CAAuB,IAAvB;IACA,IAAI,QAAQ,CAAC,MAAT,GAAkB,CAAtB,EACE,QAAQ,CAAC,OAAT,CAAiB,KAAD,IAAU,UAAU,CAAC,QAAX,CAAoB,KAApB,CAA1B;IAEF,KAAK,OAAL,CAAa,MAAb,CAAoB,IAAI,CAAC,QAAzB;EACD,CAtDO,CAwDR;;;EACS,CAAR,QAAQ,GAAkD;IAAA,IAAjD,IAAiD,uEAAhC,KAAK,IAA2B;IACzD,IAAI,IAAI,CAAC,QAAL,IAAiB,IAArB,EAAyB,MACjB,IADiB;IAGzB,IAAI,IAAI,CAAC,QAAL,CAAc,MAAd,GAAuB,CAA3B,EACE,KAAK,IAAI,KAAT,IAAkB,IAAI,CAAC,QAAvB,EAA+B,OACtB,KAAK,QAAL,CAAc,KAAd,CADsB;EAIlC;;EAED,KAAK,GAAS;IACZ,IAAI,OAAO,GAAG,IAAI,0BAAJ,EAAd;;IACA,KAAK,IAAI,IAAT,IAAiB,KAAK,QAAL,EAAjB,EACE,OAAO,CAAC,WAAR,CAAoB,IAAI,CAAC,QAAzB,EAAmC,IAAI,CAAC,MAAL,CAAY,QAA/C,EAAyD,IAAI,CAAC,aAA9D;;IAEF,OAAO,OAAP;EACD;;gBAtEa;IAJhB,KAEU,OAFV,GAEoB,IAAI,GAAJ,EAFpB;IAKI,KAAK,IAAL,GAAY,IAAI,8BAAJ,CAAa;MAAC,QAAQ,EAAE;IAAX,CAAb,CAAZ;IACA,KAAK,OAAL,CAAa,GAAb,CAAiB,IAAjB,EAAuB,KAAK,IAA5B;EACD;;AAPO;;MA6EJ,8B,CAAQ;EAUZ,QAAQ,CAAC,IAAD,EAAiB;IACvB,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB;IACA,IAAI,CAAC,MAAL,GAAc,IAAd;EACD;;EACD,WAAW,CAAC,IAAD,EAAiB;IAC1B,KAAK,QAAL,CAAc,MAAd,CAAqB,KAAK,QAAL,CAAc,OAAd,CAAsB,IAAtB,CAArB,EAAkD,CAAlD;IACA,IAAI,CAAC,MAAL,GAAc,SAAd;EACD;;cAVW,K,EAA6B;IAP3C,KAIS,QAJT,GAIgC,EAJhC;IAAA,KAKS,OALT,GAKmB,KALnB;IAQI,KAAK,QAAL,GAAgB,KAAK,CAAC,QAAtB;EACD;;AATW;;AAoBP,IAAI,yCAAc,GAAG,IAAI,0BAAJ,EAArB;;SI1uBS,yC,GAA4D;EAAA,IAA/C,KAA+C,uEAAnB,EAAmB;EAC1E,IAAI;IACF,SAAS,GAAG,KADV;IACe,WAAA,EACjB,WAFE;IAES,MAAA,EACX;EAHE,IAIA,KAJJ;EAKA,IAAI,KAAK,GAAG,aAAM,CAAC;IACjB,SAAS,EAAE,KADM;IAEjB,cAAc,EAAE,SAAS,IAAI,qBAAc;EAF1B,CAAD,CAAlB;EAIA,IAAG,CAAE,UAAF,EAAa,UAAb,IAA2B,eAAQ,CAAC,KAAD,CAAtC;EACA,IAAG,CAAE,mBAAF,EAAuB,eAAvB,IAA0C,eAAQ,CAAA,MAAO,KAAK,CAAC,OAAN,CAAc,SAAd,IAA2B,KAAK,CAAC,OAAN,CAAc,cAAhD,CAArD;EAEA,IAAI,WAAW,GAAG,kBAAW,CAAA,MAAO,eAAe,CAAC,KAAK,CAAC,OAAN,CAAc,SAAd,IAA2B,KAAK,CAAC,OAAN,CAAc,cAA1C,CAAtB,EAAiF,EAAjF,CAA7B;EAEA,IAAI,aAAa,GAAG,kBAAW,CAAC,SAAD,IAAc;IAC3C,KAAK,CAAC,OAAN,CAAc,SAAd,GAA0B,SAA1B;IACA,UAAU,CAAC,SAAD,CAAV;IACA,WAAW;EACZ,CAJ8B,EAI5B,CAAC,WAAD,CAJ4B,CAA/B;EAMA,8BAAuB,CAAE,cAAF,IAAqB;IAC1C,KAAK,CAAC,OAAN,CAAc,cAAd,GAA+B,cAA/B;IACA,WAAW;EACZ,CAHsB,EAGpB,EAHoB,EAGhB;iBAAC;EAAD,CAHgB,CAAvB;EAKA,IAAI;IAAC,UAAA,EAAA;EAAD,IAAe,eAAQ,CAAC;IAC1B,UAAU,EAAE,MADc;mBAE1B;EAF0B,CAAD,CAA3B;EAKA,IAAI;IAAC,gBAAA,EAAA;EAAD,IAAqB,qBAAc,CAAC;IACtC,UAAU,EAAA,CAAG,MADyB;IAEtC,mBAAmB,EAAE;EAFiB,CAAD,CAAvC;EAKA,OAAO;eACL,UADK;IAEL,cAAc,EAAE,KAAK,CAAC,OAAN,CAAc,SAAd,IAA2B,mBAFtC;IAGL,UAAU,EAAE,MAAM,GAAG,gBAAH,GAAsB;EAHnC,CAAP;AAKD;;SDpCe,yC,CAAU,K,EAAuB;EAC/C,IAAI;IAAC,QAAA,EAAA,QAAD;IAAS,UAAA,EAAE,UAAX;IAAqB,cAAA,EAAE;EAAvB,IAAyC,KAA7C;EACA,IAAI;IAAC,SAAA,EAAA,SAAD;IAAU,cAAA,EAAE,cAAZ;IAA0B,UAAA,EAAE;EAA5B,IAA0C,yCAAY,CAAC,KAAD,CAA1D;EACA,IAAI,KAAK,GAAG,YAAK,CAAC,QAAN,CAAe,IAAf,CAAoB,QAApB,CAAZ;EAEA,OAAM,aAAC,YAAK,CAAC,YAAN,CAAmB,KAAnB,EAA0B,iBAAU,CAAC,KAAK,CAAC,KAAP,EAAc,E,GACpD,UADoD;IAEvD,SAAS,EAAE,WAAI,CAAC;OACb,UAAU,IAAI,E,GAAK,SADN;OAEb,cAAc,IAAI,E,GAAK;IAFV,CAAD;EAFwC,CAAd,CAApC,CAAP;AAOD;;AEtBD,IAAI,sCAAgB,GAAA,aAAG,YAAK,CAAC,aAAN,CAA2C,IAA3C,CAAvB;;SAES,yC,CAAoB,G,EAAyD;EACpF,IAAI,OAAO,GAAG,iBAAU,CAAC,sCAAD,CAAV,IAAgC,EAA9C;EACA,iBAAU,CAAC,OAAD,EAAU,GAAV,CAAV,CAFoF,CAIpF;;EACA,IAAI;IAAC,GAAG,EAAE,CAAN;IAAO,GAAK;EAAZ,IAA0B,OAA9B;EACA,OAAO,UAAP;AACD;AAED;;AAAA;;;AAEG,SACM,uCADN,CACwB,KADxB,EACuD,GADvD,EACyF;EAC1F,IAAI;IAAC,QAAA,EAAA,QAAD;IAAS,GAAK;EAAd,IAA4B,KAAhC;EACA,IAAI,OAAO,GAAG,E,GACT,UADS;SAEZ;EAFY,CAAd;EAKA,OAAM,aAAA,YAAA,CAAA,aAAA,CACH,sCAAgB,CAAC,QADd,EACsB;IAAC,KAAK,EAAE;EAAR,CADtB,EAED,QAFC,CAAN;AAKD;;AAED,IAAI,wCAAkB,GAAA,aAAG,YAAK,CAAC,UAAN,CAAiB,uCAAjB,CAAzB;;SAWgB,yC,CAAa,K,EAAyB,M,EAAoD;EACxG,IAAI;IAAC,UAAA,EAAA;EAAD,IAAe,eAAQ,CAAC,KAAD,CAA3B;EACA,IAAI;IAAC,aAAA,EAAA;EAAD,IAAkB,kBAAW,CAAC,KAAD,CAAjC;EACA,IAAI,YAAY,GAAG,iBAAU,CAAC,UAAD,EAAa,aAAb,CAA7B;EACA,IAAI,QAAQ,GAAG,yCAAmB,CAAC,MAAD,CAAlC;EACA,IAAI,gBAAgB,GAAG,KAAK,CAAC,UAAN,GAAmB,EAAnB,GAAwB,QAA/C;EACA,IAAI,YAAY,GAAG,aAAM,CAAC,KAAK,CAAC,SAAP,CAAzB;EAEA,gBAAS,CAAA,MAAO;IACd,IAAI,YAAY,CAAC,OAAb,IAAwB,MAAM,CAAC,OAAnC,EACE,yCAAW,CAAC,MAAM,CAAC,OAAR,CAAX;IAEF,YAAY,CAAC,OAAb,GAAuB,KAAvB;EACD,CALQ,EAKN,CAAC,MAAD,CALM,CAAT;EAOA,OAAO;IACL,cAAc,EAAE,iBAAU,CACxB,E,GACK,YADL;MAEE,QAAQ,EAAE,KAAK,CAAC,mBAAN,IAAyB,CAAK,KAAK,CAAC,UAApC,GAAiD,CAAA,CAAjD,GAAsD;IAFlE,CADwB,EAKxB,gBALwB;EADrB,CAAP;AASD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusSafely} from './focusSafely';\nimport {isElementVisible} from './isElementVisible';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\n\nexport interface FocusScopeProps {\n  /** The contents of the focus scope. */\n  children: ReactNode,\n\n  /**\n   * Whether to contain focus inside the scope, so users cannot\n   * move focus outside, for example in a modal dialog.\n   */\n  contain?: boolean,\n\n  /**\n   * Whether to restore focus back to the element that was focused\n   * when the focus scope mounted, after the focus scope unmounts.\n   */\n  restoreFocus?: boolean,\n\n  /** Whether to auto focus the first focusable element in the focus scope on mount. */\n  autoFocus?: boolean\n}\n\nexport interface FocusManagerOptions {\n  /** The element to start searching from. The currently focused element by default. */\n  from?: Element,\n  /** Whether to only include tabbable elements, or all focusable elements. */\n  tabbable?: boolean,\n  /** Whether focus should wrap around when it reaches the end of the scope. */\n  wrap?: boolean,\n  /** A callback that determines whether the given element is focused. */\n  accept?: (node: Element) => boolean\n}\n\nexport interface FocusManager {\n  /** Moves focus to the next focusable or tabbable element in the focus scope. */\n  focusNext(opts?: FocusManagerOptions): FocusableElement,\n  /** Moves focus to the previous focusable or tabbable element in the focus scope. */\n  focusPrevious(opts?: FocusManagerOptions): FocusableElement,\n  /** Moves focus to the first focusable or tabbable element in the focus scope. */\n  focusFirst(opts?: FocusManagerOptions): FocusableElement,\n    /** Moves focus to the last focusable or tabbable element in the focus scope. */\n  focusLast(opts?: FocusManagerOptions): FocusableElement\n}\n\ntype ScopeRef = RefObject<Element[]>;\ninterface IFocusContext {\n  scopeRef: ScopeRef,\n  focusManager: FocusManager\n}\n\nconst FocusContext = React.createContext<IFocusContext>(null);\n\nlet activeScope: ScopeRef = null;\n\n// This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\nexport function FocusScope(props: FocusScopeProps) {\n  let {children, contain, restoreFocus, autoFocus} = props;\n  let startRef = useRef<HTMLSpanElement>();\n  let endRef = useRef<HTMLSpanElement>();\n  let scopeRef = useRef<Element[]>([]);\n  let ctx = useContext(FocusContext);\n  // if there is no scopeRef on the context, then the parent is the focusScopeTree's root, represented by null\n  let parentScope = ctx?.scopeRef ?? null;\n\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n  }, [children, parentScope]);\n\n  // add to the focus scope tree in render order because useEffects/useLayoutEffects run children first whereas render runs parent first\n  // which matters when constructing a tree\n  if (focusScopeTree.getTreeNode(parentScope) && !focusScopeTree.getTreeNode(scopeRef)) {\n    focusScopeTree.addTreeNode(scopeRef, parentScope);\n  }\n\n  let node = focusScopeTree.getTreeNode(scopeRef);\n  node.contain = contain;\n\n  useFocusContainment(scopeRef, contain);\n  useRestoreFocus(scopeRef, restoreFocus, contain);\n  useAutoFocus(scopeRef, autoFocus);\n\n  // this layout effect needs to run last so that focusScopeTree cleanup happens at the last moment possible\n  useLayoutEffect(() => {\n    if (scopeRef && (parentScope || parentScope == null)) {\n      return () => {\n        // Restore the active scope on unmount if this scope or a descendant scope is active.\n        // Parent effect cleanups run before children, so we need to check if the\n        // parent scope actually still exists before restoring the active scope to it.\n        if (\n          (scopeRef === activeScope || isAncestorScope(scopeRef, activeScope)) &&\n          (!parentScope || focusScopeTree.getTreeNode(parentScope))\n        ) {\n          activeScope = parentScope;\n        }\n        focusScopeTree.removeTreeNode(scopeRef);\n      };\n    }\n  }, [scopeRef, parentScope]);\n\n  let focusManager = createFocusManagerForScope(scopeRef);\n\n  return (\n    <FocusContext.Provider value={{scopeRef, focusManager}}>\n      <span data-focus-scope-start hidden ref={startRef} />\n      {children}\n      <span data-focus-scope-end hidden ref={endRef} />\n    </FocusContext.Provider>\n  );\n}\n\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\nexport function useFocusManager(): FocusManager {\n  return useContext(FocusContext)?.focusManager;\n}\n\nfunction createFocusManagerForScope(scopeRef: React.RefObject<Element[]>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode() as FocusableElement;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable, accept} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable, accept} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    }\n  };\n}\n\nconst focusableElements = [\n  'input:not([disabled]):not([type=hidden])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'a[href]',\n  'area[href]',\n  'summary',\n  'iframe',\n  'object',\n  'embed',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]'\n];\n\nconst FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n\nfocusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst TABBABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nfunction getScopeRoot(scope: Element[]) {\n  return scope[0].parentElement;\n}\n\nfunction shouldContainFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return true;\n}\n\nfunction useFocusContainment(scopeRef: RefObject<Element[]>, contain: boolean) {\n  let focusedNode = useRef<FocusableElement>();\n\n  let raf = useRef(null);\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = null;\n      }\n      return;\n    }\n\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = (e) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef)) {\n        return;\n      }\n\n      let focusedElement = document.activeElement;\n      let scope = scopeRef.current;\n      if (!isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: true}, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode())  as FocusableElement;\n      }\n\n      e.preventDefault();\n      if (nextElement) {\n        focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = (e) => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if (!activeScope || isAncestorScope(activeScope, scopeRef)) {\n        activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if (shouldContainFocus(scopeRef) && !isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if (activeScope) {\n          focusFirstInScope(activeScope.current);\n        }\n      } else if (shouldContainFocus(scopeRef)) {\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = (e) => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if (shouldContainFocus(scopeRef) && !isElementInChildScope(document.activeElement, scopeRef)) {\n          activeScope = scopeRef;\n          if (document.body.contains(e.target)) {\n            focusedNode.current = e.target;\n            focusedNode.current.focus();\n          } else if (activeScope) {\n            focusFirstInScope(activeScope.current);\n          }\n        }\n      });\n    };\n\n    document.addEventListener('keydown', onKeyDown, false);\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n    };\n  }, [raf]);\n}\n\nfunction isElementInAnyScope(element: Element) {\n  return isElementInChildScope(element);\n}\n\nfunction isElementInScope(element: Element, scope: Element[]) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction isElementInChildScope(element: Element, scope: ScopeRef = null) {\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {scopeRef: s} of focusScopeTree.traverse(focusScopeTree.getTreeNode(scope))) {\n    if (isElementInScope(element, s.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction isAncestorScope(ancestor: ScopeRef, scope: ScopeRef) {\n  let parent = focusScopeTree.getTreeNode(scope)?.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) {\n      return true;\n    }\n    parent = parent.parent;\n  }\n  return false;\n}\n\nfunction focusElement(element: FocusableElement | null, scroll = false) {\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {\n      // ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {\n      // ignore\n    }\n  }\n}\n\nfunction focusFirstInScope(scope: Element[], tabbable:boolean = true) {\n  let sentinel = scope[0].previousElementSibling;\n  let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable}, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: false}, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n\n  focusElement(nextNode as FocusableElement);\n}\n\nfunction useAutoFocus(scopeRef: RefObject<Element[]>, autoFocus: boolean) {\n  const autoFocusRef = React.useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      activeScope = scopeRef;\n      if (!isElementInScope(document.activeElement, activeScope.current)) {\n        focusFirstInScope(scopeRef.current);\n      }\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\n\nfunction useRestoreFocus(scopeRef: RefObject<Element[]>, restoreFocus: boolean, contain: boolean) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  const nodeToRestoreRef = useRef(typeof document !== 'undefined' ? document.activeElement as FocusableElement : null);\n\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!restoreFocus || contain) {\n      return;\n    }\n\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if (!activeScope || isAncestorScope(activeScope, scopeRef)) {\n        activeScope = scopeRef;\n      }\n    };\n\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, contain]);\n\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    focusScopeTree.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current;\n    if (!restoreFocus) {\n      return;\n    }\n\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement as FocusableElement;\n      if (!isElementInScope(focusedElement, scopeRef.current)) {\n        return;\n      }\n      let nodeToRestore = focusScopeTree.getTreeNode(scopeRef).nodeToRestore;\n\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = getFocusableTreeWalker(document.body, {tabbable: true});\n\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n        focusScopeTree.getTreeNode(scopeRef).nodeToRestore = null;\n      }\n\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do {\n          nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n        } while (isElementInScope(nextElement, scopeRef.current));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) {\n          focusElement(nextElement, true);\n        } else {\n           // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n           // then move focus to the body.\n           // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!isElementInAnyScope(nodeToRestore)) {\n            focusedElement.blur();\n          } else {\n            focusElement(nodeToRestore, true);\n          }\n        }\n      }\n    };\n\n    if (!contain) {\n      document.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        document.removeEventListener('keydown', onKeyDown, true);\n      }\n      let nodeToRestore = focusScopeTree.getTreeNode(scopeRef).nodeToRestore;\n\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      if (\n        restoreFocus\n        && nodeToRestore\n        && (\n          isElementInScope(document.activeElement, scopeRef.current)\n          || (document.activeElement === document.body && activeScope === scopeRef)\n        )\n      ) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = focusScopeTree.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (document.activeElement === document.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {\n                focusElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\n\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\nexport function getFocusableTreeWalker(root: Element, opts?: FocusManagerOptions, scope?: Element[]) {\n  let selector = opts?.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(\n    root,\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        // Skip nodes inside the starting node.\n        if (opts?.from?.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        if ((node as Element).matches(selector)\n          && isElementVisible(node as Element)\n          && (!scope || isElementInScope(node as Element, scope))\n          && (!opts?.accept || opts.accept(node as Element))\n        ) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n    }\n  );\n\n  if (opts?.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n\n/**\n * Creates a FocusManager object that can be used to move focus within an element.\n */\nexport function createFocusManager(ref: RefObject<Element>, defaultOptions: FocusManagerOptions = {}): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      }\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      } else {\n        let next = last(walker);\n        if (next) {\n          focusElement(next, true);\n        }\n        return next;\n      }\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = last(walker);\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let next = last(walker);\n      if (next) {\n        focusElement(next, true);\n      }\n      return next;\n    }\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: FocusableElement;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n\n\nclass Tree {\n  private root: TreeNode;\n  private fastMap = new Map<ScopeRef, TreeNode>();\n\n  constructor() {\n    this.root = new TreeNode({scopeRef: null});\n    this.fastMap.set(null, this.root);\n  }\n\n  get size() {\n    return this.fastMap.size;\n  }\n\n  getTreeNode(data: ScopeRef) {\n    return this.fastMap.get(data);\n  }\n\n  addTreeNode(scopeRef: ScopeRef, parent: ScopeRef, nodeToRestore?: FocusableElement) {\n    let parentNode = this.fastMap.get(parent ?? null);\n    let node = new TreeNode({scopeRef});\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) {\n      node.nodeToRestore = nodeToRestore;\n    }\n  }\n\n  removeTreeNode(scopeRef: ScopeRef) {\n    // never remove the root\n    if (scopeRef === null) {\n      return;\n    }\n    let node = this.fastMap.get(scopeRef);\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) {\n      if (\n        current !== node &&\n        node.nodeToRestore &&\n        current.nodeToRestore &&\n        node.scopeRef.current &&\n        isElementInScope(current.nodeToRestore, node.scopeRef.current)\n      ) {\n        current.nodeToRestore = node.nodeToRestore;\n      }\n    }\n    let children = node.children;\n    parentNode.removeChild(node);\n    if (children.length > 0) {\n      children.forEach(child => parentNode.addChild(child));\n    }\n    this.fastMap.delete(node.scopeRef);\n  }\n\n  // Pre Order Depth First\n  *traverse(node: TreeNode = this.root): Generator<TreeNode> {\n    if (node.scopeRef != null) {\n      yield node;\n    }\n    if (node.children.length > 0) {\n      for (let child of node.children) {\n        yield* this.traverse(child);\n      }\n    }\n  }\n\n  clone(): Tree {\n    let newTree = new Tree();\n    for (let node of this.traverse()) {\n      newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);\n    }\n    return newTree;\n  }\n}\n\nclass TreeNode {\n  public scopeRef: ScopeRef;\n  public nodeToRestore: FocusableElement;\n  public parent: TreeNode;\n  public children: TreeNode[] = [];\n  public contain = false;\n\n  constructor(props: {scopeRef: ScopeRef}) {\n    this.scopeRef = props.scopeRef;\n  }\n  addChild(node: TreeNode) {\n    this.children.push(node);\n    node.parent = this;\n  }\n  removeChild(node: TreeNode) {\n    this.children.splice(this.children.indexOf(node), 1);\n    node.parent = undefined;\n  }\n}\n\nexport let focusScopeTree = new Tree();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusWithoutScrolling, runAfterTransition} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\n\n/**\n * A utility function that focuses an element while avoiding undesired side effects such\n * as page scrolling and screen reader issues with CSS transitions.\n */\nexport function focusSafely(element: FocusableElement) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if (getInteractionModality() === 'virtual') {\n    let lastFocusedElement = document.activeElement;\n    runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) {\n        focusWithoutScrolling(element);\n      }\n    });\n  } else {\n    focusWithoutScrolling(element);\n  }\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction isStyleVisible(element: Element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {\n    return false;\n  }\n\n  let {display, visibility} = element.style;\n\n  let isVisible = (\n    display !== 'none' &&\n    visibility !== 'hidden' &&\n    visibility !== 'collapse'\n  );\n\n  if (isVisible) {\n    const {getComputedStyle} = element.ownerDocument.defaultView;\n    let {display: computedDisplay, visibility: computedVisibility} = getComputedStyle(element);\n\n    isVisible = (\n      computedDisplay !== 'none' &&\n      computedVisibility !== 'hidden' &&\n      computedVisibility !== 'collapse'\n    );\n  }\n\n  return isVisible;\n}\n\nfunction isAttributeVisible(element: Element, childElement?: Element) {\n  return (\n    !element.hasAttribute('hidden') &&\n    (element.nodeName === 'DETAILS' &&\n      childElement &&\n      childElement.nodeName !== 'SUMMARY'\n      ? element.hasAttribute('open')\n      : true)\n  );\n}\n\n/**\n * Adapted from https://github.com/testing-library/jest-dom and \n * https://github.com/vuejs/vue-test-utils-next/.\n * Licensed under the MIT License.\n * @param element - Element to evaluate for display or visibility.\n */  \nexport function isElementVisible(element: Element, childElement?: Element) {\n  return (\n    element.nodeName !== '#comment' &&\n    isStyleVisible(element) &&\n    isAttributeVisible(element, childElement) &&\n    (!element.parentElement || isElementVisible(element.parentElement, element))\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport clsx from 'clsx';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ReactElement} from 'react';\nimport {useFocusRing} from './useFocusRing';\n\nexport interface FocusRingProps {\n  /** Child element to apply CSS classes to. */\n  children: ReactElement,\n  /** CSS class to apply when the element is focused. */\n  focusClass?: string,\n  /** CSS class to apply when the element has keyboard focus. */\n  focusRingClass?: string,\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default false\n   */\n  within?: boolean,\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\n/**\n * A utility component that applies a CSS class when an element has keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function FocusRing(props: FocusRingProps) {\n  let {children, focusClass, focusRingClass} = props;\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing(props);\n  let child = React.Children.only(children);\n\n  return React.cloneElement(child, mergeProps(child.props, {\n    ...focusProps,\n    className: clsx({\n      [focusClass || '']: isFocused,\n      [focusRingClass || '']: isFocusVisible\n    })\n  }));\n}\n","import {DOMAttributes} from '@react-types/shared';\nimport {isFocusVisible, useFocus, useFocusVisibleListener, useFocusWithin} from '@react-aria/interactions';\nimport {useCallback, useState} from 'react';\nimport {useRef} from 'react';\n\nexport interface AriaFocusRingProps {\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default 'false'\n   */\n  within?: boolean,\n\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusRingAria {\n  /** Whether the element is currently focused. */\n  isFocused: boolean,\n\n  /** Whether keyboard focus should be visible. */\n  isFocusVisible: boolean,\n\n  /** Props to apply to the container element with the focus ring. */\n  focusProps: DOMAttributes\n}\n\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function useFocusRing(props: AriaFocusRingProps = {}): FocusRingAria {\n  let {\n    autoFocus = false,\n    isTextInput,\n    within\n  } = props;\n  let state = useRef({\n    isFocused: false,\n    isFocusVisible: autoFocus || isFocusVisible()\n  });\n  let [isFocused, setFocused] = useState(false);\n  let [isFocusVisibleState, setFocusVisible] = useState(() => state.current.isFocused && state.current.isFocusVisible);\n\n  let updateState = useCallback(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n\n  let onFocusChange = useCallback(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n\n  useFocusVisibleListener((isFocusVisible) => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {isTextInput});\n\n  let {focusProps} = useFocus({\n    isDisabled: within,\n    onFocusChange\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n\n  return {\n    isFocused,\n    isFocusVisible: state.current.isFocused && isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableDOMProps, FocusableElement, FocusableProps} from '@react-types/shared';\nimport {focusSafely} from './';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport React, {MutableRefObject, ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\nimport {useFocus, useKeyboard} from '@react-aria/interactions';\n\nexport interface FocusableOptions extends FocusableProps, FocusableDOMProps {\n  /** Whether focus should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusableProviderProps extends DOMAttributes {\n  /** The child element to provide DOM props to. */\n  children?: ReactNode\n}\n\ninterface FocusableContextValue extends FocusableProviderProps {\n  ref?: MutableRefObject<FocusableElement>\n}\n\nlet FocusableContext = React.createContext<FocusableContextValue>(null);\n\nfunction useFocusableContext(ref: RefObject<FocusableElement>): FocusableContextValue {\n  let context = useContext(FocusableContext) || {};\n  useSyncRef(context, ref);\n\n  // eslint-disable-next-line\n  let {ref: _, ...otherProps} = context;\n  return otherProps;\n}\n\n/**\n * Provides DOM props to the nearest focusable child.\n */\nfunction FocusableProvider(props: FocusableProviderProps, ref: RefObject<FocusableElement>) {\n  let {children, ...otherProps} = props;\n  let context = {\n    ...otherProps,\n    ref\n  };\n\n  return (\n    <FocusableContext.Provider value={context}>\n      {children}\n    </FocusableContext.Provider>\n  );\n}\n\nlet _FocusableProvider = React.forwardRef(FocusableProvider);\nexport {_FocusableProvider as FocusableProvider};\n\nexport interface FocusableAria {\n  /** Props for the focusable element. */\n  focusableProps: DOMAttributes\n}\n\n/**\n * Used to make an element focusable and capable of auto focus.\n */\nexport function useFocusable(props: FocusableOptions, domRef: RefObject<FocusableElement>): FocusableAria {\n  let {focusProps} = useFocus(props);\n  let {keyboardProps} = useKeyboard(props);\n  let interactions = mergeProps(focusProps, keyboardProps);\n  let domProps = useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = useRef(props.autoFocus);\n\n  useEffect(() => {\n    if (autoFocusRef.current && domRef.current) {\n      focusSafely(domRef.current);\n    }\n    autoFocusRef.current = false;\n  }, [domRef]);\n\n  return {\n    focusableProps: mergeProps(\n      {\n        ...interactions,\n        tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n      },\n      interactionProps\n    )\n  };\n}\n"]},"metadata":{},"sourceType":"module"}