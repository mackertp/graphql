{"ast":null,"code":"var _jsxFileName = \"/Users/prestonmackert/Documents/graphql/odyssey-lift-off-part1/client/src/pages/tracks.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Layout } from '../components';\nimport { useQuery, gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TRACKS = gql`\n  query GetTracks {\n    tracksForHome {\n      id\n      title\n      thumbnail\n      length\n      modulesCount\n      author {\n        id\n        name\n        photo\n      }\n    }\n  }`;\n/**\n * Tracks Page is the Catstronauts home page.\n * We display a grid of tracks fetched with useQuery with the TRACKS query\n */\n\nconst Tracks = () => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TRACKS);\n  if (loading) return 'Loading...';\n  if (error) return `ERROR! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    grid: true,\n    children: JSON.stringify(data)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Tracks, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Tracks;\nexport default Tracks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tracks\");","map":{"version":3,"names":["React","Layout","useQuery","gql","TRACKS","Tracks","loading","error","data","message","JSON","stringify"],"sources":["/Users/prestonmackert/Documents/graphql/odyssey-lift-off-part1/client/src/pages/tracks.js"],"sourcesContent":["import React from 'react';\nimport { Layout } from '../components';\nimport { useQuery, gql } from '@apollo/client';\n\nconst TRACKS = gql`\n  query GetTracks {\n    tracksForHome {\n      id\n      title\n      thumbnail\n      length\n      modulesCount\n      author {\n        id\n        name\n        photo\n      }\n    }\n  }`;\n\n/**\n * Tracks Page is the Catstronauts home page.\n * We display a grid of tracks fetched with useQuery with the TRACKS query\n */\nconst Tracks = () => {\n  \n  const { loading, error, data } = useQuery(TRACKS);\n\n  if (loading) return 'Loading...';\n\n  if (error) return `ERROR! ${error.message}`;\n\n  return <Layout grid>{JSON.stringify(data)}</Layout>;\n};\n\nexport default Tracks;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;;AAEA,MAAMC,MAAM,GAAGD,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAdA;AAgBA;AACA;AACA;AACA;;AACA,MAAME,MAAM,GAAG,MAAM;EAAA;;EAEnB,MAAM;IAAEC,OAAF;IAAWC,KAAX;IAAkBC;EAAlB,IAA2BN,QAAQ,CAACE,MAAD,CAAzC;EAEA,IAAIE,OAAJ,EAAa,OAAO,YAAP;EAEb,IAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAACE,OAAQ,EAA/B;EAEX,oBAAO,QAAC,MAAD;IAAQ,IAAI,MAAZ;IAAA,UAAcC,IAAI,CAACC,SAAL,CAAeH,IAAf;EAAd;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CATD;;GAAMH,M;UAE6BH,Q;;;KAF7BG,M;AAWN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}